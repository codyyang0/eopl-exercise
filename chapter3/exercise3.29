Exercise 3.29 [ ] Unfortunately, programs that use dynamic binding may be exceptionally difficult to understand. For example, under lexical binding, consistently
renaming the bound variables of a procedure can never change the behavior of a program: we can even remove all variables and replace them by their lexical addresses,
as in section 3.6. But under dynamic binding, this transformation is unsafe.
For example, under dynamic binding, the procedure proc (z) a returns the value
of the variable a in its caller’s environment. Thus, the program
let a = 3
in let p = proc (z) a
in let f = proc (x) (p 0)
in let a = 5
in (f 2)
returns 5, since a’s value at the call site is 5. What if f’s formal parameter were a?

it will return 5
if (f a) then it change the procedure p's a variable = 5, so every procedure need concern of
the let same variable's name after it's definition, dynamic scoping is not a good design for procedures.


